<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 	xmlns:context="http://www.springframework.org/schema/context"
 	xmlns:aop="http://www.springframework.org/schema/aop"
 	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                    http://www.springframework.org/schema/context
                    http://www.springframework.org/schema/context/spring-context-2.5.xsd
                    http://www.springframework.org/schema/aop
                    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                    ">
                    
    <!-- 支持注解 -->
    <context:annotation-config />
     
    <!-- 扫描文件（自动将servicec层注入）
	<context:component-scan base-package="com.hjs.study.spring.service"/> -->
       
	<!-- 配置数据源 -->
    <bean id="jdbcDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >  
	    <property name="driverClassName">  
	        <value>org.gjt.mm.mysql.Driver</value>  
	    </property>  
	    <property name="url">  
	        <value>jdbc:mysql://localhost:3306/review?useUnicode=true&amp;characterEncoding=UTF-8</value>  
	    </property>  
	    <property name="username">  
	        <value>root</value>  
	    </property>  
	    <property name="password">  
	        <value>root</value>  
	    </property>  
	</bean>  
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	    <property name="dataSource" ref="jdbcDataSource" />  
	    <property name="configLocation" value="classpath:conf/mybatis-config.xml"></property> 
	</bean>  
	
	 <!-- spring与mybatis整合配置，扫描所有dao --> 
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<property name="basePackage" value="com.hjs.study.spring.dao"></property>
	 </bean>

	<!--AOP:
		proxy-target-class值为false时使用JAVA动态代理
		值为true时，使用cglib代理，但是cglib动态代理不支持面向切口编程，因此使用java动态代理
		expression指定织入的规则、method指定切面方法
		args(param) 括号中的参数是指参数的名称（id），注解方式实例化的bean其名称为类名的小写；如果是任意参数，则是 ..
	 -->
	<bean id="logAspect" class="com.hjs.study.spring.controller.LogAspect">
	</bean>
 	<aop:config proxy-target-class="false">	
		<aop:aspect ref="logAspect">
			<aop:pointcut expression="execution(* *.getU*(..))" id="pointcut-1"/>
			<aop:before method="signBeforeM" pointcut-ref="pointcut-1"/>
			<aop:after method="signAfterM"  pointcut-ref="pointcut-1"/>
		</aop:aspect>
	</aop:config>
	<!-- article是传入的参数 -->
	<aop:config proxy-target-class="false">	
		<aop:aspect ref="logAspect">
			<aop:pointcut expression="execution(* *.save*BasicArticle(..)) and args(article))" id="pointcut-2"/>
			<aop:before method="handleContent" pointcut-ref="pointcut-2"/>
		</aop:aspect>
	</aop:config>
</beans>